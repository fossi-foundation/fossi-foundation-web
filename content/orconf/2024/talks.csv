Day,Time,Type,Title,Presenter,Notes,Announced in batch,Abstract
,,Normal,Roadmap for Open Source EDA in Europe,Stefan Wallentowitz,Advocacy,1,
,,Normal,Accelerating software development for emerging ISA extensions with cloud-based FPGAs: RVV case study,Marek Pikuła,"Core, cloud",1,"The RISC-V Vector Extension (RVV) promises an enhanced performance and power efficiency across various complex computational tasks. However, the efficient utilization of RVV demands careful consideration of the optimization approach. This article examines strategies for accelerating this process. Key challenges include assessing performance differences among algorithmic approaches and overcoming initial hardware constraints. FireSim provides a comprehensive solution by offering advanced software and hardware simulation capabilities. Utilizing FireSim, we started the process of enhancing source code with RVV instructions (called vectorization) for the pixman project. Our experience outlines the efficacy of a cloud-based FPGA simulation in expediting software development for emerging ISA extensions. Overall, FireSim facilitates faster iteration cycles and informed design decisions, benefiting individual developers and fostering collaboration in remote teams."
,,Normal,FazyRV: A RISC-V Core that Scales to Your Needs,Meinhard Kissich,Core,1,"FazyRV is a scalable RISC-V core that can be synthesized into a (1-)bit-serial, 2-, 4-, or 8-bit-serial implementation to fulfill your performance requirements with the least area (resp. resources) demand. FazyRV provides manifold variants to adapt to the target technology by, e.g., avoiding dual-port BRAM at the cost of an additional clock cycle. Contradictory to hand-optimized cores at the gate level, FazyRV tries to avoid manual low-level optimizations to increase readability and simplify adaptations. This talk gives an insight into the open-source FazyRV core and its design objectives. We show how the area demand scales, answer why there is no 16-bit variant, discuss how the performance can be improved, and outline possible extensions to improve the current FazyRV design."
,,Normal,Debug your Design with a Tiny Interpreter,Christopher Lozinski,FPGA,1,"Interpreters are very helpful tools for hardware development, but the existing tools require slow interprocess communication, and lots of memory. Best to use a tiny interpreter that runs on both the FPGA, and in the simulator. . Less than 2KBytes of memory required and there is no slow interprocess communication. There are even two ASICs that run similar interpreters. ."
,,Normal,VexiiRiscv : A Debian demonstration,Charles Papon,Core,1,"The VexiiRiscv (Vex2Risc5) project aim at remplacing VexRiscv and extends its scope with features such as multi-issue, hardware prefetcher, 64 bits support, ... This presentation will mainly be a live demonstration of the project running Debian on FPGA, exposing the level of performance achievable on such system including boot, userland, some demos and finaly a few slides."
,,Normal,Project Arrakeen: One API to rule all PDKs,Staf Verhaegen,PDK,1,"Project Arrakeen is an umbrella project for providing a python framework for portable and scalable digital and analog circuits. It is based on the PDKMaster base project which provide a uniform API to PDK data and generation of circuit and layouts. On this base project other projects are being built that provide standard cells, IO cells, SRAM compiler and analog blocks. In this talk the state of the Arrakeen project and it's subprojects for the three supported open source PDKs, e.g. Sky130, IHP SG13G2 and GF180MCU will be presented."
,,Normal,naja_edit: An Open Source Tool for Gate-Level Netlist editing and optimization,Christophe Alexandre,"Netlist, Tool",1,"naja_edit is an open source tool designed to optimize and edit gate-level netlists. It features algorithms for Dead Logic Elimination, Constant Propagation, and Primitives Optimization, all performed with minimal changes to the hierarchical netlist structure. This tool can be interleaved with Yosys and OpenROAD, making it particularly useful for large designs requiring hierarchical synthesis. naja_edit also features a Python interface for power users to inspect and edit the netlist using simple scripts. This talk will present optimization results on a set of open source designs."
,,Normal,Forastero: cocotb testbenches with batteries included,Peter Birch,Verification,1,"Forastero is a Python library that builds on top of cocotb adding standard components like drivers, monitors, and scoreboards but without bringing the full weight of a UVM environment. While in some ways a spiritual successor to cocotb-bus, Forastero goes further and provides mechanisms for generating complex random stimulus. In this talk I'll present how you can use Forastero to quickly construct a testbench around a DUT, driving and monitoring multiple interfaces, and producing complex stimulus patterns. Forastero is fully open source and comes with both documentation and examples. It can be found on GitHub at github.com/Intuity/forastero"
,,Normal,DFHDL: The 3-in-1 Abstraction Approach to Hardware Design,Oron Port,Design,1,"Join us for a dive into DFHDL (DFiant Hardware Description Language), where we break down a fresh approach to hardware design. This talk introduces a unique three-layer abstraction method that blends Dataflow (DF), Register-Transfer (RT), and Event-Driven (ED) models into one streamlined framework. We’ll explore how DFHDL simplifies and speeds up the logic design processes and our goals to do the same for verification. Expect a straightforward discussion on how each layer of DFHDL works, why it matters, and what it means for the future of hardware design. We’ll share real-life examples and insights that show DFHDL in action. Whether you’re deep into hardware design or just curious about how chips come to life, this talk has something for you. DFHDL is an opensource framework available at https://dfianthdl.github.io/ (WIP)"
,,Normal,BYOL (Build Your Own Linter) - UVMLint for IEEE-UVM core code development,Ajeetha Kumari Venkatesan,Verification,1,"UVM is the most adopted design verification methodology in the field of ASIC and FPGA designs. Lint and static checking of code has proven to be very effective in projects that have wide user base, longer lifetime and distributed developers. During the recent UVM IEEE 1800.2-2023 release cycle, an observation was made regarding the potential application of a custom UVMLint solution to lint the UVM Base Class Library (BCL) as it gets developed, updated etc. We at AsFigo have developed custom rules for linting UVM BCL code on top of PySlint, an open-source SystemVerilog testbench linter. We intend to offer this as an opensource lint package to the UVM IEEE committee and to the general audience via GitHub. The eventual goal is to have these rules as gatekeepers via GitHub actions so that any future code addition to the UVM BCL is free from common pitfalls. Based on early brainstorming, below are some of the sample lint rules that are relevant to the UVM BCL codebase: • Avoid race condition around ""static const"" (use localparam instead) • Avoid one-liner conditional statements: o if (cond) $display (""cond""); o if (cond) .. else $display (""Else cond as single line""); o case..endcase • Avoid one-liner code in loops: o for, repeat, while, do..while, foreach • Use enadlabels for elements such as endclass, endfunction, endtask etc. • Flag non-virtual methods Typical UVMLint rules for a VIP user would be quite different from the requirements of UVM BCL. These rules are tailored for UVM BCL codebase. As an example, a typical UVMLint rule for a VIP would be: • Check that agent is reusable by ensuring that active components are guarded with a conditional check to is_active == UVM_ACTIVE Such a rule is quite useless for UVM BCL as it provides the base class library for tens of thousands of engineers around the globe using this library to build VIPs, verify their IPs, systems etc. In this talk we show how we approach this cusotm UVMLint development with sample Python code, tests and results. A snapshot of UVMLint findings on latest IEEE 1800.2-2023 codebase is below: ** Violation count by Rule-IDs ** DBG_CL_MISSING_ENDLABEL : 286 DBG_METHOD_MISSING_ENDLABEL : 1899 DBG_FN_MISSING_ENDLABEL : 752 DBG_AVOID_ONE_LINER_IF : 73 DBG_AVOID_ONE_LINER_ELSE : 88 RACE_NO_STATIC_CONST : 8 REUSE_NON_VIRTUAL_METHOD : 1407 --- UVMLint Concise Report --- Total number of rules violated: 7"
,,Normal,My open source analog microelectronics journey,Matt Venn,"Analog, Design",2,"Analog microelectronics is a crucial but often overlooked part of ASIC design. In this talk I will share my experience getting started with analog microelectronics, and taping out my first few designs. I will cover motivation, tools, my designs, and my success and failures so far. The presentation will end with a discussion on how this fascinating topic fits into the wider picture of open source silicon and the next steps needed to enable radio transmitters and receivers."
,,Normal,"OSVVM in a NutShell, VHDL’s #1 Verification Methodology",Jim Lewis,,2,"OSVVM is a suite of libraries designed to streamline your VHDL entire verification process, boosting productivity and reducing development time. Each library provides independent capabilities, allowing selective adoption and a learn-as-you-go approach. Whether using directed or random testing, OSVVM facilitates writing concise and readable test cases for both simple unit/RTL tests and complex, full-chip or system-level FPGA and ASIC tests. OSVVM provides VHDL with verification capabilities that rival SystemVerilog + UVM. These include transaction-level modeling, verification components, co-simulation with software, randomized test generation, self-checking test support, verification data structures, comprehensive test reporting in HTML and text, and synchronization primitives. With OSVVM and a good team lead, any VHDL engineer can do verification – and have fun doing it. OSVVM grew rapidly during the COVID years, giving us better capability, better data structures, better test reporting (HTML and Junit), and scripting that is simple to use (and works with most VHDL simulators). This presentation will show how these advances fit into the overall OSVVM Methodology."
,,Normal,Open Source Standard Cell Library Design,Antoine Sirianni,,2,"With the avenue of AI as a game changer, what would Open Source Standard Cell Library Design consist in to date? Where to start ? Let's focus on combinatorics to provide with an unexpected contribution."
,,Normal,cocotb as a way towards a new verification methodology,Marek Cieplucha,,2,"SystemVerilog and UVM have dominated digital verification, even though they are relatively old technologies with significant limitations.
The EDA industry's strategy has been to develop smarter (and more expensive) tools based on these technologies.
However, Cocotb offers a different approach. It minimizes the reliance on EDA tools (limited to just simulation) by enabling the vast capabilities of the Python ecosystem.

Is this a recipe for success? What challenges does it present? Is there room for both strategies in the future?

In this presentation, I will discuss some general considerations, as well as share experiences from successful deployments of the Cocotb flow in industrial projects (which might even be in your pocket right now).

Some fancy around-Cocotb ideas developed will be shown: usage of massive parallelism, flow unification with algorithm-level modeling and checkpointing."
,,Normal,A very small cross compiler for OpenRISC and maybe your homebrew processor,Jörg Mische,,2,"PunyCC is a cross compiler for a very small subset of C. Only one source file, no preprocessor, no structs, no floating point and only one datatype that can be used as unsigend int or pointer to char. Due to these simplifications the compiler source code is very small and can easily be adopted to a new target instruction set. So far PunyCC supported 4 architectures: ARM Thumb-2, RISC-V, x86-32 and WebAssembly. It can compile itself and thus provides cross compilers from any of the instruction sets to any other. This talk presents how easy it is to add OpenRISC support to PunyCC. Use it as a blueprint for porting PunyCC to your own special instruction set."
,,Normal,The Saturn Vector Unit: Design of a Fully Compliant Open-Source RISC-V Vector Unit,Jerry Zhao,,2,
,,Normal,OS-EDA: An open-source course about open-source EDA,Thorsten Knoll / Christian Wittke,,2,"This talk will present the ongoing effort and progress in creating the OS-EDA course. An overview of the available materials, lectures, and hands-on components will be included. Additionally, we will explain how to participate and use the materials independently. A first test run of the course, planned to be held in-house at IHP, will be announced during this talk at ORConf. The course's overall goal is to help participants understand and use open-source EDA tools to create an open-source tapeout, with IHP as the default target chip factory and the usage of OPENROAD. The course will be available in English, with all materials hosted in a public Git repository under an open-source license. This work is funded by the German Federal Ministry of Education and Research in the Project FMD-QNC (16ME0831)."
,,Normal,Synthesizing Music Synthesizers,Sebastian Holzapfel,,2,"Tiliqua is an open hardware development platform, DSP library and collection of examples (built in Amaranth HDL) that aims to make FPGA-based audio and video synthesis more accessible. The hardware itself is designed to integrate into the Eurorack ecosystem, or can be easily taken apart and used in custom instrument designs. This presentation will go through the Tiliqua hardware design, the RTL framework provided and some of the included example projects. The project is distributed under CERN-OHL-S-V2 and is under active development here: https://github.com/apfelaudio/tiliqua"
,,Normal,cocotb Gets A Glow Up: Fixes and Features of 2.0,Kaleb Barrett,,2,"Since it's inception and the minting of 1.0, cocotb has carried with it several design issues that only API-breaking changes could fix. 2024 is the year those issues finally get fixed. cocotb 2.0 includes changes to how tests are parameterized and selected, how tasks are managed, how HDL values are represented in Python, and how simulations are run. Tune in to this talk to learn how to leverage these new features and how to make your code 2.0 compliant."
,,Normal,The future of FuseSoC,Olof Kindgren,,2,"While individual projects like Linux and GCC paved the road for open source software success, it can be argued that the thing that really enabled scaling up development of Linux-based solutions was the idea of package management. Having a common way to install software and describe their relations made it possible to rapidly create custom systems. The same can be said for language-specific package managers like pip for Python or Cargo for Rust.

On the chip design side, FuseSoC has been doing the same thing since its inception 2011. It is by now likely the world's most widely used package manager, both for open source projects and for proprietary code.

The background of FuseSoC has been presented several times over the years, so this presentation aims to instead look ahead and see what new features that are in store for FuseSoC and its sister project Edalize."
,,Normal,Porting of Proprietary PDK to Digital Open-Source EDA Tools,Tomasz Hemperek,,,"Open-source tools for ASIC design are gaining momentum due to their cost-effectiveness, customizability, and reliability. These tools have proven their value through multiple successful designs in recent years. This talk will present our experience in successfully porting a proprietary 110nm Process Design Kit (PDK) to open-source EDA tools such as Yosys and OpenRoad. We will discuss both the successes and challenges encountered during this process, using the prototype Gbit serial data link as a case study."
,,Normal,Teaching Analog IC Design using Open Source Tools,Ted Johansson,,,"EU and USA Chips Act programs have regained the focus on fabrication of semiconductors, new devices, circuit design, and the supply chains. In the next couple of years, huge amounts of money, shared between government and industry, will be spent on rebuilding the semiconductor industry in Europe and USA. However, during the last 25 years, this area has not attracted the students. We need to educate a new generation of engineers and researchers on semiconductors and circuit design. Analog/RF circuit design is usually not very complex, but often requires knowledge of actual device physics and parameters. It also requires many simulation to find good circuit solutions and robust designs. Open-source tools for parts of IC design flows have been available for a long time, but only lately, open process information (process design kits, PDKs) has been made available, which make fully open-source design flows for circuit design and commercial foundry fabrication possible. But how well suited for exploring and teaching the principles of analog/RF IC design are open-source tools and PDKs compared to commercial tools and closed PDKs? And can they be used for prototype chips in research projects? In the presentation, I will describe how we created a PhD course (also suitable for master programs) on analog IC design, addressing the design chain, tools, and everything you need to know to design and have chips fabricated at a foundry using only open-source tools and PDKs. A comparison with the commercial tools currently used in education and industry will also be made."
,,Normal,Buckets of Coverage,Stuart Alldred,,,"Bucket is a python-based functional coverage tool designed to work easily with cocotb(/Forastero). It allows for the easy creation of multiple nested covergroups and coverpoints with a straight forward sampling mechanism. Each coverpoint is a cross of one or more axes, with the ability to modify target hits, illegal or ignore status for each bucket. The data to be covered can be sampled directly from the DUT, higher levels of abstraction (such as entire CPU pipelines), or even parsing of logs/test output. Bucket is being actively developed and used by Vypercore for our own IP. It is fully open source and available at github.com/VyperCore/bucket, where you can find further documentation and examples."
,,Normal,BenchBot: Automated OSVVM Testbench Template Generator for VHDL DUTs,Adruth Vasudevan Srinivasan / Arya Sharma,,,"BenchBot is an open-source Python based app developed to automate the generation of OSVVM-compliant testbenches for VHDL designs. It utilizes YAML configuration files to define testbench parameters, enabling users to quickly produce tailored test environments for their DUTs. Main goal of this bot is to provide a ready-to-use OSVMM compliant testbench for a given VHDL DUT with popular elements such as clock generator, reset generator, main stimulus place holder, a watchdog etc. It also paves way to distributed test development by leveraging on modular testbench architecture using OSVMM framework. In this paper, we share our experience of using BenchBot on various open-source VHDL designs available online for the community, ensuring its reliability and versatility across different use cases. Along the way, we found a few unsupported constructs and added enhancements to the bot. This bot streamlines the process of creating standardized testbenches, making integrating it into existing VHDL development workflows easier."
,,Normal,SoCESS? - Adventures deploying (digital design) Open Source assets into Curriculum,John Goodenough,,,"The many efforts in the open source community have produced IP and tool assets that can no be deployed at scale into Curriculum. At the University of Sheffield we have begun a multi year curriculum transformation within the school of Electronic and Electrical Engineering. We will outline our plans , discuss delivery constraints and report on experiences to date deploying at moderate cohort scale, this will focus on digital SoC design using Risc-V. The non technical experiences should transfer to other methodology and flow areas. We aim to catalyse the community in thinking more deeply about user needs for in academic teaching and to promote further collaboration and sharing of ideas"